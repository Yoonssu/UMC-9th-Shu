<미션>

--------------------------------------------------------------------------------------------------------------
기능                   | Method | Endpoint                                  | Request Header                     | Request Body                                                                                                                     | Query / Path Variable           | 설명
--------------------------------------------------------------------------------------------------------------
홈 화면 정보 조회        | GET    | /api/home                                | Authorization: Bearer {token}       | -                                                                                                                                | ?userId={userId}               | 유저의 진행 중인 미션, 추천 미션, 최근 리뷰 조회
회원 가입               | POST   | /api/users/signup                        | Content-Type: application/json      | { "name": "윤수정", "gender": "FEMALE", "birthDate": "2002-10-05", "address": "서울시 서대문구", "email": "orvosdoktor21@gmail.com", "phoneNumber": "010-1234-5678" } | -                              | 신규 유저 등록
진행 중인 미션 목록 조회 | GET    | /api/missions/in-progress                | Authorization: Bearer {token}       | -                                                                                                                                | ?userId={userId}               | 유저가 진행 중인 미션 목록 조회
완료한 미션 목록 조회   | GET    | /api/missions/completed                  | Authorization: Bearer {token}       | -                                                                                                                                | ?userId={userId}               | 유저가 완료한 미션 목록 조회
미션 성공               | PATCH  | /api/missions/{missionId}/complete       | Authorization: Bearer {token}       | { "userId": 1 }                                                                                                                 | missionId (Path Variable)      | 미션 완료 처리 및 완료일 갱신
리뷰 작성               | POST   | /api/reviews                             | Authorization: Bearer {token}       | { "userId": 1, "missionId": 3, "rating": 5, "content": "음식이 정말 맛있었어요!", "photoUrls": ["https://s3.../review1.jpg"] }  | -                              | 미션 완료 후 리뷰 등록
리뷰 조회               | GET    | /api/reviews                             | Authorization: Bearer {token}       | -                                                                                                                                | ?userId={userId}               | 유저가 작성한 리뷰 전체 조회
문의 작성               | POST   | /api/inquiries                           | Authorization: Bearer {token}       | { "userId": 1, "title": "앱 오류 문의", "content": "사진 업로드가 안 돼요", "photoUrls": ["https://s3.../bug.jpg"] }             | -                              | 유저 문의 등록
--------------------------------------------------------------------------------------------------------------


<시니어 미션>

---

1. Soft Delete란?

Soft Delete는 데이터베이스에서 실제로 데이터를 삭제하지 않고, 사용자 입장에서는 삭제된 것처럼 보이게 하는 방식임.
데이터를 복구하거나 삭제 이력을 추적할 수 있도록 `is_deleted` 같은 플래그를 활용함.

* 장점

  * 데이터 복구 가능
  * 삭제 이력 및 로그 관리 용이
  * 연관 데이터의 무결성 유지

* 단점

  * 모든 조회 쿼리에 `WHERE is_deleted = false` 조건을 추가해야 함
  * 실제 삭제되지 않아 데이터베이스 용량 증가 가능

* 적합한 HTTP Method

  * 일반적으로 `DELETE`를 사용하지만, 내부적으로는 실제 삭제 대신 `UPDATE`를 수행하여 `is_deleted` 값을 변경함.
  * 즉, 외부적으로는 DELETE 요청이지만 내부 로직은 UPDATE 동작을 수행하는 구조임.

---

2. 컨트롤 URI란?

컨트롤 URI는 HTTP 프로토콜에서 자원의 상태를 제어하거나 조작하기 위해 사용되는 URI를 의미함.
RESTful API에서 자원의 생성, 조회, 수정, 삭제를 수행할 때 이러한 URI를 사용함.

* 예시

  1. 자원 생성 (Create)
     `POST /api/users` → 새로운 사용자 생성
  2. 자원 조회 (Read)
     `GET /api/users/123` → ID가 123인 사용자 정보 조회
  3. 자원 수정 (Update)
     `PUT /api/users/123` 또는 `PATCH /api/users/123` → 사용자 정보 수정
  4. 자원 삭제 (Delete)
     `DELETE /api/users/123` → 사용자 삭제

즉, 컨트롤 URI는 특정 자원을 제어하거나 상태를 변경할 때 사용하는 API 경로를 의미함.

---

3. Microsoft API 설계 가이드 핵심 정리

4. RESTful 설계에서는 리소스를 명사 중심으로 정의하고, HTTP 메서드(`GET`, `POST`, `PATCH`, `DELETE`)로 행위를 구분함.

5. URI는 소문자와 복수형으로 통일하고, `/users/1/orders`처럼 계층 구조를 명확히 표현함.

6. API 버전 관리는 `/v1/` 형태의 URI 버전 또는 Header(`Accept: application/vnd.company.v1+json`) 방식으로 처리함.

7. 응답 시 표준 HTTP 상태 코드를 사용하여 명확하게 의미를 전달함. (`200`, `201`, `400`, `404` 등)

8. 대용량 데이터는 `?page=1&size=20`과 같은 페이징 및 필터링 기능을 제공함.

9. 오류 응답은 `{ "error": { "code": "...", "message": "..." } }` 형태로 일관된 구조로 제공함.

10. 모든 요청은 HTTPS를 사용하고, 인증은 OAuth 2.0 또는 JWT 기반으로 수행함.

11. 필요 시 HATEOAS 원칙을 적용하여 클라이언트가 API를 스스로 탐색할 수 있도록 설계함.

12. API는 Swagger(OpenAPI) 등을 활용해 자동 문서화함.

13. 변경 시에는 하위 호환성을 유지하고, Deprecated 공지를 통해 안정성을 확보함.
